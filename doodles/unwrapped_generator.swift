func type(i: Int) -> String {
    return "T\(i)"
}


func variable(i: Int) -> String {
    return "x\(i)"
}


print("// This is how I try to deal with deserialization of JSON objects\n// with multiple properties using [SwiftyJSON][] (read: without going\n// full [Argo][]).\n//\n// This code is generated by `unwrapped_generator.swift`.\n//\n//   [SwiftyJSON]: https://github.com/SwiftyJSON/SwiftyJSON\n//   [Argo]: https://github.com/thoughtbot/Argo\n//\n\n")


for iMax in 2 ... 10 {
    let indices = Array(1 ... iMax)

    print("func unwrapped<")
    print(", ".join(indices.map(type)))
    print(">(")
    print(", ".join(indices.map { "\(variable($0)): \(type($0))?" }))
    print(") -> (")
    print(", ".join(indices.map(type)))
    print(")? {\n")
    print("    if ")
    print(" && ".join(indices.map { "\(variable($0)) != nil" }))
    print(" {\n        return (")
    print(", ".join(indices.map { "\(variable($0))!" }))
    print(")\n    } else {\n        return nil\n    }\n")
    print("}\n\n")
}
